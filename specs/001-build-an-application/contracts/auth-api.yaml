openapi: 3.0.3
info:
  title: LibreChat Authentication API
  description: Authentication endpoints for LibreChat Desktop Application
  version: 1.0.0
  
servers:
  - url: '{serverUrl}/api'
    variables:
      serverUrl:
        default: 'https://localhost:3080'
        description: LibreChat server base URL

paths:
  /auth/login:
    post:
      summary: Authenticate user with credentials
      description: Login with username/password or OAuth provider
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PasswordLoginRequest'
                - $ref: '#/components/schemas/OAuthLoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh authentication token
      description: Use refresh token to get new access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidate current session and tokens
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user:
    get:
      summary: Get current user information
      description: Retrieve authenticated user details
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PasswordLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        remember:
          type: boolean
          default: false

    OAuthLoginRequest:
      type: object
      required:
        - provider
        - code
      properties:
        provider:
          type: string
          enum: [google, github, discord, openid]
          example: "google"
        code:
          type: string
          example: "oauth_authorization_code"
        state:
          type: string
          example: "csrf_state_token"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9..."

    AuthResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9..."
        expiresIn:
          type: integer
          example: 3600
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          example: "user_123456"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        preferences:
          type: object
          additionalProperties: true

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "INVALID_CREDENTIALS"
        message:
          type: string
          example: "Invalid username or password"
        details:
          type: object
          additionalProperties: true

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"